{"version":3,"sources":["../../../src/core/routes/library.js"],"names":["express","require","router","Router","db","route","get","req","res","next","Track","findAsync","tracks","json","map","track","covers","app","locals","static","cover","catch","id","params","findOneAsync","_id","status","error","streamProviders","service","path","stream","sendStatus","set","headers","pipe","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,SAASF,QAAQG,MAAR,EAAf;AACA,IAAMC,KAAKH,QAAQ,mBAAR,CAAX;;AAEAC,OACGG,KADH,CACS,SADT,EAEGC,GAFH,CAEO,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvB,6DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACsBL,GAAGM,KAAH,CAASC,SAAT,CAAmB,EAAnB,CADtB;;AAAA;AACOC,kBADP;;AAECJ,gBAAIK,IAAJ,CAASD,OAAOE,GAAP,CAAW,iBAAS;AAC3B,kBAAI,CAACC,MAAMC,MAAX,EAAmB,OAAOD,KAAP;AACnBA,oBAAMC,MAAN,GAAeD,MAAMC,MAAN,CAAaF,GAAb,CAAiB,iBAAS;AACvC,uBAAOP,IAAIU,GAAJ,CAAQC,MAAR,CAAeC,MAAf,CAAsBH,MAAtB,GAA+B,GAA/B,GAAqCI,KAA5C;AACD,eAFc,CAAf;AAGA,qBAAOL,KAAP;AACD,aANQ,CAAT;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,KASKM,KATL,CASWZ,IATX;AAUD,CAbH;;AAeAP,OACGG,KADH,CACS,aADT,EAEGC,GAFH,CAEO,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvB,MAAMa,KAAKf,IAAIgB,MAAJ,CAAWD,EAAtB;AACA,6DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACqBlB,GAAGM,KAAH,CAASc,YAAT,CAAsB;AACxCC,mBAAKH;AADmC,aAAtB,CADrB;;AAAA;AACOP,iBADP;;AAAA,gBAKMA,KALN;AAAA;AAAA;AAAA;;AAAA,8CAKoBP,IAAIkB,MAAJ,CAAW,GAAX,EAAgBb,IAAhB,CAAqB,EAACc,OAAO,kBAAR,EAArB,CALpB;;AAAA;AAAA;AAAA,mBAMsBpB,IAAIU,GAAJ,CAAQC,MAAR,CAAeU,eAAf,CAA+Bb,MAAMc,OAArC,EAA8Cd,MAAMe,IAApD,CANtB;;AAAA;AAMOC,kBANP;;AAAA,gBAOMA,MAPN;AAAA;AAAA;AAAA;;AAAA,8CAOqBvB,IAAIwB,UAAJ,CAAe,GAAf,CAPrB;;AAAA;AAQCxB,gBAAIyB,GAAJ,CAAQ,eAAR,EAAyB,OAAzB;AACAzB,gBAAIyB,GAAJ,CAAQ,cAAR,EAAwB,YAAxB;AACAzB,gBAAIyB,GAAJ,CAAQ,gBAAR,EAA0BF,OAAOG,OAAP,CAAe,gBAAf,CAA1B;AACAH,mBAAOI,IAAP,CAAY3B,GAAZ;;AAXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,KAYKa,KAZL,CAYWZ,IAZX;AAaD,CAjBH;;AAmBA2B,OAAOC,OAAP,GAAiBnC,MAAjB","file":"library.js","sourcesContent":["'use strict';\n\nconst express = require('express');\nconst router = express.Router();\nconst db = require('../database/index');\n\nrouter\n  .route('/tracks')\n  .get((req, res, next) => {\n    (async () => {\n      const tracks = await db.Track.findAsync({});\n      res.json(tracks.map(track => {\n        if (!track.covers) return track;\n        track.covers = track.covers.map(cover => {\n          return req.app.locals.static.covers + '/' + cover;\n        });\n        return track;\n      }));\n    })().catch(next);\n  });\n\nrouter\n  .route('/tracks/:id')\n  .get((req, res, next) => {\n    const id = req.params.id;\n    (async () => {\n      const track = await db.Track.findOneAsync({\n        _id: id\n      });\n\n      if (!track) return res.status(404).json({error: 'Track not found.'});\n      const stream = await req.app.locals.streamProviders[track.service](track.path);\n      if (!stream) return res.sendStatus(504);\n      res.set('accept-ranges', 'bytes');\n      res.set('content-type', 'audio/mpeg');\n      res.set('content-length', stream.headers['content-length']);\n      stream.pipe(res);\n    })().catch(next);\n  });\n\nmodule.exports = router;\n"]}