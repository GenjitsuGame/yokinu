{"version":3,"sources":["../../../../src/core/database/models/cover.js"],"names":["Snowflake","require","Promise","worker","Worker","retry","fs","promisifyAll","config","mkdirp","sync","coverPath","err","code","module","exports","save","format","data","getId","filename","writeFileAsync","get","readFileAsync"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,YAAYC,QAAQ,gBAAR,CAAlB;AACA,IAAMC,UAAUD,QAAQ,UAAR,CAAhB;AACA,IAAME,SAAS,IAAIH,UAAUI,MAAd,CAAqB,EAACC,OAAO,IAAR,EAArB,CAAf;AACA,IAAMC,KAAKJ,QAAQK,YAAR,CAAqBN,QAAQ,IAAR,CAArB,CAAX;AACA,IAAMO,SAASP,QAAQ,gBAAR,CAAf;AACA,IAAMQ,SAASR,QAAQ,QAAR,CAAf;;AAEA,IAAI;AACFQ,SAAOC,IAAP,CAAYF,OAAOG,SAAnB;AACD,CAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,MAAIA,IAAIC,IAAJ,KAAa,QAAjB,EAA2B,MAAMD,GAAN;AAC5B;;AAEDE,OAAOC,OAAP,CAAeC,IAAf;AAAA,wEAAsB,iBAAOC,MAAP,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACIf,OAAOgB,KAAP,EADJ;;AAAA;AAAA;AAAA,wCACsB,GADtB;AAAA,0BAC4BF,MAD5B;AACdG,oBADc;AAAA;AAAA,mBAEdd,GAAGe,cAAH,CAAkBb,OAAOG,SAAP,GAAmBS,QAArC,EAA+CF,IAA/C,CAFc;;AAAA;AAAA,6CAGbE,QAHa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;;AAMAN,OAAOC,OAAP,CAAeO,GAAf;AAAA,yEAAqB,kBAAMF,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACNd,GAAGiB,aAAH,CAAiBf,OAAOG,SAAP,GAAmBS,QAApC,CADM;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAAA;AAAA;AAAA;AAAA","file":"cover.js","sourcesContent":["'use strict';\n\nconst Snowflake = require('node-snowflake');\nconst Promise = require('bluebird');\nconst worker = new Snowflake.Worker({retry: true});\nconst fs = Promise.promisifyAll(require('fs'));\nconst config = require('../config.json');\nconst mkdirp = require('mkdirp');\n\ntry {\n  mkdirp.sync(config.coverPath);\n} catch (err) {\n  if (err.code !== 'EEXIST') throw err;\n}\n\nmodule.exports.save = async (format, data) => {\n  const filename = (await worker.getId()) + '.' + format;\n  await fs.writeFileAsync(config.coverPath + filename, data);\n  return filename;\n};\n\nmodule.exports.get = async filename => {\n  return await fs.readFileAsync(config.coverPath + filename);\n};\n"]}