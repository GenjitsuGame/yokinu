{"version":3,"sources":["../../../src/modules/dropbox/index.js"],"names":["dir","dropbox","filesListFolder","path","recursive","include_media_info","result","addToDb","entries","has_more","filesListFolderContinue","cursor","loadDirectory","promises","entry","console","log","db","Track","findOneAsync","service","id","alreadyExists","filesGetTemporaryLink","download","_getStream","link","stream","metadata","Promise","resolve","reject","mm","duration","fileSize","size","err","destroy","trackFromSameAlbum","artist","join","album","picturePaths","covers","all","picture","map","Cover","save","pic","format","data","push","insertAsync","title","track","disk","genre","Dropbox","require","config","https","accessToken","token","module","exports","load","i","directories","length","getStream","get","response"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nconst Dropbox = require('dropbox');\nconst Promise = require('bluebird');\nconst config = require('../../config');\nconst db = require('../../core/index').db;\nconst https = require('https');\nconst mm = require('musicmetadata');\n\nconst dropbox = new Dropbox({\n  accessToken: config.dropbox.token\n});\n\nmodule.exports.load = async () => {\n  for (let i = 0; i < config.dropbox.directories.length; i++) {\n    await loadDirectory(config.dropbox.directories[i]);\n  }\n};\n\nasync function loadDirectory (dir) {\n  let result = (await dropbox.filesListFolder({\n    path: dir,\n    recursive: true,\n    include_media_info: true\n  }));\n\n  await addToDb(result.entries);\n\n  while (result.has_more) {\n    result = await dropbox.filesListFolderContinue({\n      cursor: result.cursor\n    });\n\n    await addToDb(result.entries);\n  }\n}\n\nasync function addToDb (entries) {\n  const promises = [];\n  for (let entry of entries) {\n    if (entry['.tag'] !== 'file') continue;\n    console.log(entry);\n    const alreadyExists = await db.Track.findOneAsync({\n      service: 'dropbox',\n      path: entry.id\n    });\n    if (alreadyExists) {\n      console.log('Already exists!');\n      continue;\n    }\n    let download = await dropbox.filesGetTemporaryLink({\n      path: entry.id\n    });\n    const stream = await _getStream(download.link);\n    let metadata;\n    try {\n      metadata = await new Promise((resolve, reject) => {\n        mm(stream, {duration: true, fileSize: download.metadata.size}, (err, metadata) => {\n          if (err) return reject(err);\n          resolve(metadata);\n        });\n      });\n    } catch (err) {\n      continue;\n    }\n    stream.destroy();\n    let trackFromSameAlbum;\n    if (metadata.artist.join(', ') && metadata.album && metadata.artist.join(',') !== 'Unknown' && metadata.album !== 'Unknown') {\n      trackFromSameAlbum = await db.Track.findOneAsync({\n        artist: metadata.artist.join(', '),\n        album: metadata.album\n      });\n    }\n    let picturePaths;\n    if (trackFromSameAlbum && trackFromSameAlbum.covers) {\n      picturePaths = trackFromSameAlbum.covers;\n    } else {\n      picturePaths = await Promise.all(metadata.picture.map(pic => db.Cover.save(pic.format, pic.data)));\n    }\n    promises.push(db.Track.insertAsync({\n      title: metadata.title || 'Unknown',\n      artist: metadata.artist.join(', ') || 'Unknown',\n      album: metadata.album,\n      duration: metadata.duration,\n      track: metadata.track,\n      disk: metadata.disk,\n      genre: metadata.genre,\n      covers: picturePaths,\n      service: 'dropbox',\n      path: entry.id\n    }));\n  }\n  await Promise.all(promises);\n}\n\nmodule.exports.getStream = async function (id) {\n  let download = await dropbox.filesGetTemporaryLink({\n    path: id\n  });\n  return _getStream(download.link);\n};\n\nfunction _getStream (link) {\n  return new Promise(resolve => {\n    https.get(link, (response) => {\n      resolve(response);\n    });\n  });\n}\n"]}