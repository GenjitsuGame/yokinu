{"version":3,"sources":["../../../src/modules/gmusic/index.js"],"names":["_config","require","express","db","PlayMusic","Promise","pm","promisifyAll","config","gmusic","Error","initAsync","email","password","then","console","log","bind","catch","module","exports","load","token","i","LIMIT","getAllTracksAsync","nextPageToken","tracksData","data","items","fetchTracks","concat","getPlayListsAsync","fetchPlayLists","getPlayListEntriesAsync","playListEntriesData","fetchPlayListEntries","tracks","playlists","playlistTracks","getFavoritesAsync","favorites","forEach","Track","findOne","service","path","track","id","playlistsWithTrack","playlistTrack","find","trackId","filter","playlist","playlistId","map","name","create","title","artist","albumArtist","album","duration","durationMillis","size","estimatedSize","genres","genre","split","covers","artistArtRef","type","ref","url","n","trackNumber","of","totalTrackCount","disk","discNumber","totalDiscCount","getStream","getStreamAsync"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nconst _config = require('../../config');\nconst express = require('express');\nconst db = require('../../core/database');\nconst PlayMusic = require('playmusic');\nconst Promise = require('bluebird');\nconst pm = new PlayMusic();\n\nPromise.promisifyAll(pm);\n\n// config will be passed to the module later\nconst config = _config.gmusic;\nif (!config) throw new Error('No config found for module : gmusic');\n\n(async () => {\n  await pm.initAsync({\n    email: config.email,\n    password: config.password\n  });\n})().then(console.log.bind(console)).catch(console.log.bind(console));\n\nmodule.exports.load = async () => {\n  const LIMIT = -1; // temporary constant to avoid fetching too much data.\n\n  const tracks = await fetchTracks(null, 0);\n  const playlists = await fetchPlayLists();\n  const playlistTracks = await fetchPlayListEntries(null, 0);\n  const favorites = await pm.getFavoritesAsync();\n  //console.log(favorites);\n\n  tracks.forEach(track => {\n    (async () => {\n      if (await db.Track.findOne({\n          service: 'gmusic',\n          path: track.id\n        })) return null;\n\n      let playlistsWithTrack = [];\n      const playlistTrack = playlistTracks.find(playlistTrack => playlistTrack.trackId === track.id);\n      if (playlistTrack) {\n        //console.log(playlistTrack);\n        playlistsWithTrack = playlists\n          .filter(playlist => playlist.id == playlistTrack.playlistId)\n          .map(playlist => ({\n            service: 'gmusic',\n            name: playlist.name\n          }));\n        //console.log(playlistsWithTrack);\n      }\n\n      await db.Track.create({\n        path: track.id,\n        title: track.title,\n        artist: track.artist || track.albumArtist,\n        album: track.album,\n        duration: track.durationMillis,\n        size: track.estimatedSize,\n        genres: track.genre.split(','),\n        covers: track.artistArtRef ? track.artistArtRef.map(ref => ({\n            type: 'web',\n            path: ref.url\n          })) : null,\n        track: {\n          n: track.trackNumber,\n          of: track.totalTrackCount\n        },\n        disk: {\n          n: track.discNumber,\n          of: track.totalDiscCount\n        },\n        service: 'gmusic',\n        playlists: playlistsWithTrack\n      });\n    })();\n  });\n\n  async function fetchTracks (token, i) {\n    if (i === LIMIT) return [];\n    let tracksData = await pm.getAllTracksAsync({nextPageToken: token});\n    if (!tracksData.nextPageToken) return tracksData.data.items;\n    return tracksData.data.items.concat(await fetchTracks(tracksData.nextPageToken, ++i));\n  }\n\n  async function fetchPlayLists () {\n    return (await pm.getPlayListsAsync()).data.items;\n  }\n\n  async function fetchPlayListEntries (token, i) {\n    if (i === LIMIT) return [];\n    let playListEntriesData = await pm.getPlayListEntriesAsync({nextPageToken: token});\n    if (!playListEntriesData.nextPageToken) return playListEntriesData.data.items;\n    return playListEntriesData.data.items.concat(await fetchTracks(playListEntriesData.nextPageToken, ++i));\n  }\n};\n\nmodule.exports.getStream = async (path) => {\n  return pm.getStreamAsync(path);\n};\n"]}