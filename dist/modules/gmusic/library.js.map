{"version":3,"sources":["../../../src/modules/gmusic/library.js"],"names":["token","i","LIMIT","pm","getAllTracksAsync","nextPageToken","tracksData","data","items","fetchTracks","concat","getPlayListsAsync","fetchPlayLists","getPlayListEntriesAsync","playListEntriesData","fetchPlayListEntries","PlayMusic","require","Promise","Track","PlayList","db","Library","credentials","initAsync","refresh","tracks","foreach","create","path","track","id","title","artist","albumArtist","album","duration","durationMillis","size","estimatedSize","genres","genre","split","covers","artistArtRef","map","type","ref","url","n","trackNumber","of","totalTrackCount","disk","discNumber","totalDiscCount","gTrack","forEach","playLists","gPlayList","gPlayListEntry","trackId","playListId","playlistId","playList","push","getStreamAsync"],"mappings":"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","file":"library.js","sourcesContent":["'use strict';\n\nconst PlayMusic = require('playmusic');\nconst Promise = require('bluebird');\nconst Track = require('./track');\nconst PlayList = require('./playlist');\nconst pm = new PlayMusic();\nconst db = require('../../core/database');\n\n\nconst LIMIT = 3; // temporary constant to avoid fetching too much data.\n\nclass Library {\n  constructor () {\n  }\n\n  async init (credentials) {\n    await pm.initAsync(credentials);\n    await this.refresh();\n    return this;\n  }\n\n  async load () {\n    let tracks = await fetchTracks();\n    tracks.foreach(track => {\n      db.Track.create({\n        path: track.id,\n        title: track.title,\n        artist: track.artist || track.albumArtist,\n        album: track.album,\n        duration: track.durationMillis,\n        size: track.estimatedSize,\n        genres: track.genre.split(','),\n        covers: track.artistArtRef.map(ref => ({\n          type: 'web',\n          path: ref.url\n        })),\n        track: {\n          n: track.trackNumber,\n          of: track.totalTrackCount\n        },\n        disk: {\n          n: track.discNumber,\n          of: track.totalDiscCount\n        }\n      })\n    })\n  }\n\n  async refresh () {\n    (await fetchTracks(null, 0)).forEach(gTrack => (this.tracks[gTrack.id] = new Track(gTrack)));\n    (await fetchPlayLists()).forEach(gPlayList => (this.playLists[gPlayList.id] = new PlayList(gPlayList)));\n    (await fetchPlayListEntries(null, 0))\n      .map(gPlayListEntry => {\n        var track = this.tracks[gPlayListEntry.trackId];\n        if (!track) return;\n        track.playListId = gPlayListEntry.playlistId;\n        return track;\n      })\n      .forEach(track => {\n        if (!track) return;\n        var playList = this.playLists[track.playListId];\n        if (!playList) return;\n        playList.tracks.push(track);\n      });\n  }\n\n  async getStream (id) {\n    var track = this.tracks[id];\n    if (!track) return;\n    return await pm.getStreamAsync(id);\n  }\n}\n\nasync function fetchTracks (token, i) {\n  if (i === LIMIT) return [];\n  let tracksData = await pm.getAllTracksAsync({nextPageToken: token});\n  if (!tracksData.nextPageToken) return tracksData.data.items;\n  return tracksData.data.items.concat(await fetchTracks(tracksData.nextPageToken, ++i));\n}\n\nasync function fetchPlayLists () {\n  return (await pm.getPlayListsAsync()).data.items;\n}\n\nasync function fetchPlayListEntries (token, i) {\n  if (i === LIMIT) return [];\n  var playListEntriesData = await pm.getPlayListEntriesAsync({nextPageToken: token});\n  if (!playListEntriesData.nextPageToken) return playListEntriesData.data.items;\n  return playListEntriesData.data.items.concat(await fetchTracks(playListEntriesData.nextPageToken, ++i));\n}\n"]}